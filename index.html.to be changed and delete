<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Flowing Water — Top 30 Binance Futures (USDT Perp)</title>
  <style>
    :root{--bg:#071025;--panel:#0f1724;--muted:#9aa4c0;--accent:#6ee7b7;--danger:#ff7b7b;--glass:rgba(255,255,255,0.03)}
    html,body{height:100%;margin:0;font-family:Inter,system-ui,Segoe UI,Roboto,Arial}
    body{background:linear-gradient(180deg,#071025 0%,#001025 100%);color:#e6eef8;padding:18px}
    .container{max-width:1100px;margin:0 auto}
    header{display:flex;gap:16px;align-items:center;margin-bottom:14px}
    h1{font-size:20px;margin:0;color:var(--accent)}
    p.lead{margin:0;color:var(--muted);font-size:13px}
    .controls{display:flex;gap:8px;flex-wrap:wrap;margin:16px 0;padding:12px;background:var(--panel);border-radius:10px}
    label{font-size:13px;color:var(--muted);display:flex;gap:8px;align-items:center}
    input[type="number"], select{background:var(--glass);border:1px solid rgba(255,255,255,0.04);padding:6px 8px;border-radius:6px;color:inherit}
    button{background:linear-gradient(90deg,#2dd4bf,#06b6d4);border:none;padding:8px 12px;border-radius:8px;color:#022;font-weight:700;cursor:pointer}
    button.secondary{background:transparent;border:1px solid rgba(255,255,255,0.06);color:var(--muted)}
    table{width:100%;border-collapse:collapse;margin-top:12px;font-size:13px}
    thead th{background:rgba(255,255,255,0.02);text-align:left;padding:10px;border-bottom:1px solid rgba(255,255,255,0.03);color:var(--muted)}
    tbody td{padding:10px;border-bottom:1px dashed rgba(255,255,255,0.02)}
    .chip{display:inline-block;padding:4px 8px;border-radius:999px;background:rgba(255,255,255,0.03);font-weight:600}
    .green{color:#9ae6b4}
    .red{color:#ffb4b4}
    .small{font-size:12px;color:var(--muted)}
    footer{margin-top:18px;color:var(--muted);font-size:12px}
    .spinner{display:inline-block;width:16px;height:16px;border:2px solid rgba(255,255,255,0.08);border-top-color:var(--accent);border-radius:50%;animation:spin 1s linear infinite}
    @keyframes spin{to{transform:rotate(360deg)}}
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div>
        <h1>Flowing Water Scanner — Top 30 (Auto)</h1>
        <p class="lead">Automatically scans top 30 USDT perpetual pairs (by 24h volume) for the "flowing water" short setup.</p>
      </div>
      <div style="margin-left:auto;text-align:right">
        <div class="small">Auto-refreshing — ideal for Var's strategy</div>
      </div>
    </header><div class="controls">
  <label>24h change min % <input id="min24" type="number" value="10" step="0.1" style="width:90px"/></label>
  <label>24h change max % <input id="max24" type="number" value="25" step="0.1" style="width:90px"/></label>
  <label>4h RSI cutoff <input id="rsiCut" type="number" value="70" step="1" style="width:90px"/></label>
  <label>Max BTC 24h pump % <input id="btcMax" type="number" value="2" step="0.1" style="width:90px"/></label>
  <label>Auto-refresh (sec) <input id="intervalSec" type="number" value="10" step="1" style="width:90px"/></label>
  <button id="toggleAuto">Start Auto</button>
  <button id="scanBtn" class="secondary">Scan Now</button>
  <div style="margin-left:auto;display:flex;gap:8px;align-items:center"><div id="status" class="small">Idle</div><div id="spinner" style="display:none;margin-left:8px"><span class="spinner"></span></div></div>
</div>

<div id="summary" class="small" style="margin-bottom:8px">Notes: Runs in your browser. Uses Binance Futures public endpoints. If CORS or rate limits block requests, run locally with a CORS bypass or host the page on a small server.</div>

<table id="results">
  <thead>
    <tr><th>Symbol</th><th>24h %</th><th>4h RSI</th><th>Daily trend</th><th>Last 4h closes</th><th>Link</th></tr>
  </thead>
  <tbody></tbody>
</table>

<footer>
  <div>Behavior: picks top 30 by 24h volume, filters by 24h pump range, checks daily flip (yesterday red, today green), computes 4h RSI &gt; cutoff, and avoids scanning if BTC pumped above threshold.</div>
  <div style="margin-top:8px">Change the numeric filters above to tune sensitivity. Keep interval reasonable (>=5s) to avoid rate limits.</div>
</footer>

  </div><script>
(async function(){
  const API_ROOT = 'https://fapi.binance.com';
  const scanBtn = document.getElementById('scanBtn');
  const toggleAuto = document.getElementById('toggleAuto');
  const statusEl = document.getElementById('status');
  const spinner = document.getElementById('spinner');
  const tbody = document.querySelector('#results tbody');
  let autoTimer = null;

  function setStatus(txt, busy=false){ statusEl.textContent = txt; spinner.style.display = busy ? 'inline-block' : 'none'; }
  function sleep(ms){ return new Promise(r=>setTimeout(r,ms)); }

  function computeRSI(closes, period=14){
    if(closes.length < period+1) return null;
    let gains=0, losses=0;
    for(let i=1;i<=period;i++){ const d=closes[i]-closes[i-1]; if(d>0) gains+=d; else losses+=Math.abs(d); }
    let avgGain=gains/period, avgLoss=losses/period;
    for(let i=period+1;i<closes.length;i++){ const d=closes[i]-closes[i-1]; avgGain=(avgGain*(period-1)+(d>0?d:0))/period; avgLoss=(avgLoss*(period-1)+(d<0?Math.abs(d):0))/period; }
    if(avgLoss===0) return 100; const rs=avgGain/avgLoss; return 100 - (100/(1+rs));
  }

  async function apiGET(path, query){ const url=new URL(API_ROOT+path); if(query) Object.entries(query).forEach(([k,v])=>url.searchParams.append(k,v)); const res=await fetch(url.toString()); if(!res.ok){ const t=await res.text().catch(()=>null); throw new Error('HTTP '+res.status+' '+t); } return res.json(); }

  async function scan(){
    tbody.innerHTML='';
    const min24=parseFloat(document.getElementById('min24').value);
    const max24=parseFloat(document.getElementById('max24').value);
    const rsiCut=parseFloat(document.getElementById('rsiCut').value);
    const btcMax=parseFloat(document.getElementById('btcMax').value);

    setStatus('Fetching tickers...', true);
    let tickers;
    try { tickers = await apiGET('/fapi/v1/ticker/24hr'); } catch(e){ setStatus('Failed fetching tickers: '+e.message); return; }

    // take top 30 by quoteVolume (24h) among USDT perpetuals
    let usdt = tickers.filter(t=>t.symbol.endsWith('USDT') && !t.symbol.includes('UP') && !t.symbol.includes('DOWN') && !t.symbol.includes('BEAR') && !t.symbol.includes('BULL'));
    usdt.sort((a,b)=>parseFloat(b.quoteVolume)-parseFloat(a.quoteVolume));
    const top = usdt.slice(0,30);

    const btc = tickers.find(t=>t.symbol==='BTCUSDT');
    if(btc){ const btcChange=parseFloat(btc.priceChangePercent); if(btcChange>btcMax){ setStatus('Aborting: BTC pumped '+btcChange.toFixed(2)+'% (> '+btcMax+'%).'); return; } }

    // candidates filtered by 24h change range
    const candidates = top.filter(t=>{ const ch=parseFloat(t.priceChangePercent); return ch>=min24 && ch<=max24; });
    if(candidates.length===0){ setStatus('No candidates in top 30 matching 24h range.'); return; }

    setStatus('Checking '+candidates.length+' symbols...', true);
    const matches=[];
    for(let i=0;i<candidates.length;i++){
      const t=candidates[i]; const sym=t.symbol; statusEl.textContent=`Checking ${i+1}/${candidates.length}: ${sym}`;
      try{
        const daily = await apiGET('/fapi/v1/klines',{symbol:sym,interval:'1d',limit:5});
        const kl4h = await apiGET('/fapi/v1/klines',{symbol:sym,interval:'4h',limit:100});
        const dailyCloses = daily.map(d=>parseFloat(d[4])); if(dailyCloses.length<3){ await sleep(150); continue; }
        const len=dailyCloses.length; const prevPrev=dailyCloses[len-3], prev=dailyCloses[len-2], latest=dailyCloses[len-1];
        const yesterdayRed = prev < prevPrev; const todayGreen = latest > prev;
        const closes4h = kl4h.map(k=>parseFloat(k[4])); const rsi = computeRSI(closes4h,14);
        if(rsi !== null && rsi > rsiCut && yesterdayRed && todayGreen){ matches.push({symbol:sym,change24:parseFloat(t.priceChangePercent),rsi,prevPrev,prev,latest,recent4h:closes4h.slice(-6)}); }
      }catch(err){ console.warn('Error',sym,err); }
      await sleep(200);
    }

    tbody.innerHTML='';
    if(matches.length===0){ setStatus('No matches found after checks.'); }
    else{ setStatus('Found '+matches.length+' match(es).', false); matches.forEach(m=>{ const tr=document.createElement('tr'); const a=`<a href="https://www.binance.com/en/futures/${m.symbol}" target="_blank" rel="noreferrer">${m.symbol}</a>`; tr.innerHTML=`<td>${a}</td><td class="${m.change24>=0?'green':''}">${m.change24.toFixed(2)}%</td><td>${m.rsi.toFixed(1)}</td><td class="small">prev-prev: ${m.prevPrev}<br/>prev: ${m.prev}<br/>latest: ${m.latest}</td><td class="small">${m.recent4h.map(c=>c.toFixed(4)).join(', ')}</td><td><a class="chip" href="https://www.binance.com/en/futures/${m.symbol}" target="_blank" rel="noreferrer">Open</a></td>`; tbody.appendChild(tr); }); }
  }

  scanBtn.addEventListener('click', async ()=>{ setStatus('Starting scan...', true); try{ await scan(); }catch(e){ setStatus('Scan error: '+e.message); console.error(e); } });

  toggleAuto.addEventListener('click', ()=>{
    const sec = Math.max(5, parseInt(document.getElementById('intervalSec').value||10));
    if(autoTimer){ clearInterval(autoTimer); autoTimer=null; toggleAuto.textContent='Start Auto'; setStatus('Auto stopped'); }
    else{ autoTimer = setInterval(()=>{ scan().catch(e=>console.error(e)); }, sec*1000); toggleAuto.textContent='Stop Auto'; setStatus('Auto-running every '+sec+'s', true); // run immediate
      scan().catch(e=>console.error(e)); }
  });

  // auto-start by default
  toggleAuto.click();
})();
</script></body>
</html>
